// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: city.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CityServiceClient is the client API for CityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CityServiceClient interface {
	CreateCity(ctx context.Context, in *CreateCityReq, opts ...grpc.CallOption) (*CreateCityResponse, error)
	ReadCity(ctx context.Context, in *ReadCityRequest, opts ...grpc.CallOption) (*ReadCityResponse, error)
	UpdateCity(ctx context.Context, in *UpdateCityReq, opts ...grpc.CallOption) (*UpdateCityResponse, error)
	DeleteCity(ctx context.Context, in *DeleteCityRequest, opts ...grpc.CallOption) (*DeleteCityResponse, error)
	ListCities(ctx context.Context, in *ListCityRequest, opts ...grpc.CallOption) (*ListCityResponse, error)
}

type cityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCityServiceClient(cc grpc.ClientConnInterface) CityServiceClient {
	return &cityServiceClient{cc}
}

func (c *cityServiceClient) CreateCity(ctx context.Context, in *CreateCityReq, opts ...grpc.CallOption) (*CreateCityResponse, error) {
	out := new(CreateCityResponse)
	err := c.cc.Invoke(ctx, "/pb.CityService/CreateCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityServiceClient) ReadCity(ctx context.Context, in *ReadCityRequest, opts ...grpc.CallOption) (*ReadCityResponse, error) {
	out := new(ReadCityResponse)
	err := c.cc.Invoke(ctx, "/pb.CityService/ReadCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityServiceClient) UpdateCity(ctx context.Context, in *UpdateCityReq, opts ...grpc.CallOption) (*UpdateCityResponse, error) {
	out := new(UpdateCityResponse)
	err := c.cc.Invoke(ctx, "/pb.CityService/UpdateCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityServiceClient) DeleteCity(ctx context.Context, in *DeleteCityRequest, opts ...grpc.CallOption) (*DeleteCityResponse, error) {
	out := new(DeleteCityResponse)
	err := c.cc.Invoke(ctx, "/pb.CityService/DeleteCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityServiceClient) ListCities(ctx context.Context, in *ListCityRequest, opts ...grpc.CallOption) (*ListCityResponse, error) {
	out := new(ListCityResponse)
	err := c.cc.Invoke(ctx, "/pb.CityService/ListCities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CityServiceServer is the server API for CityService service.
// All implementations should embed UnimplementedCityServiceServer
// for forward compatibility
type CityServiceServer interface {
	CreateCity(context.Context, *CreateCityReq) (*CreateCityResponse, error)
	ReadCity(context.Context, *ReadCityRequest) (*ReadCityResponse, error)
	UpdateCity(context.Context, *UpdateCityReq) (*UpdateCityResponse, error)
	DeleteCity(context.Context, *DeleteCityRequest) (*DeleteCityResponse, error)
	ListCities(context.Context, *ListCityRequest) (*ListCityResponse, error)
}

// UnimplementedCityServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCityServiceServer struct {
}

func (UnimplementedCityServiceServer) CreateCity(context.Context, *CreateCityReq) (*CreateCityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCity not implemented")
}
func (UnimplementedCityServiceServer) ReadCity(context.Context, *ReadCityRequest) (*ReadCityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCity not implemented")
}
func (UnimplementedCityServiceServer) UpdateCity(context.Context, *UpdateCityReq) (*UpdateCityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCity not implemented")
}
func (UnimplementedCityServiceServer) DeleteCity(context.Context, *DeleteCityRequest) (*DeleteCityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCity not implemented")
}
func (UnimplementedCityServiceServer) ListCities(context.Context, *ListCityRequest) (*ListCityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCities not implemented")
}

// UnsafeCityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CityServiceServer will
// result in compilation errors.
type UnsafeCityServiceServer interface {
	mustEmbedUnimplementedCityServiceServer()
}

func RegisterCityServiceServer(s grpc.ServiceRegistrar, srv CityServiceServer) {
	s.RegisterService(&CityService_ServiceDesc, srv)
}

func _CityService_CreateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServiceServer).CreateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CityService/CreateCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServiceServer).CreateCity(ctx, req.(*CreateCityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityService_ReadCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServiceServer).ReadCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CityService/ReadCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServiceServer).ReadCity(ctx, req.(*ReadCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityService_UpdateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServiceServer).UpdateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CityService/UpdateCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServiceServer).UpdateCity(ctx, req.(*UpdateCityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityService_DeleteCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServiceServer).DeleteCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CityService/DeleteCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServiceServer).DeleteCity(ctx, req.(*DeleteCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityService_ListCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServiceServer).ListCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CityService/ListCities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServiceServer).ListCities(ctx, req.(*ListCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CityService_ServiceDesc is the grpc.ServiceDesc for CityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CityService",
	HandlerType: (*CityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCity",
			Handler:    _CityService_CreateCity_Handler,
		},
		{
			MethodName: "ReadCity",
			Handler:    _CityService_ReadCity_Handler,
		},
		{
			MethodName: "UpdateCity",
			Handler:    _CityService_UpdateCity_Handler,
		},
		{
			MethodName: "DeleteCity",
			Handler:    _CityService_DeleteCity_Handler,
		},
		{
			MethodName: "ListCities",
			Handler:    _CityService_ListCities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "city.proto",
}
